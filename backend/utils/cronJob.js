import cron from "node-cron";
import { getRandomRecipe } from "../services/spoonacularService.js";
import Recipe from "../models/Recipe.js";

const MAX_RECIPES_PER_DAY = 20;
let recipesGeneratedToday = 0;

// R√©initialiser le compteur √† minuit chaque jour
cron.schedule("0 0 * * *", () => {
  console.log("üîÑ R√©initialisation du compteur de recettes g√©n√©r√©es");
  recipesGeneratedToday = 0;
});

// Planifier la t√¢che pour g√©n√©rer une recette toutes les 20 minutes
cron.schedule("*/20 * * * *", async () => {
  console.log("‚è≥ Tentative de g√©n√©ration d'une nouvelle recette fran√ßaise...");

  try {
    if (recipesGeneratedToday >= MAX_RECIPES_PER_DAY) {
      console.log("üö´ Limite quotidienne atteinte, g√©n√©ration annul√©e");
      return;
    }

    // G√©n√©rer une nouvelle recette fran√ßaise via Spoonacular
    const newRecipeData = await getRandomRecipe();

    // V√©rifier si une recette avec le m√™me titre existe d√©j√†
    const existingRecipe = await Recipe.findOne({
      title: new RegExp(`^${newRecipeData.title.trim()}$`, "i"),
    });

    if (existingRecipe) {
      console.log("‚ö†Ô∏è Recette d√©j√† existante :", existingRecipe.title);
      return;
    }

    // Enregistrer la recette en base de donn√©es
    const newRecipe = new Recipe(newRecipeData);
    await newRecipe.save();

    recipesGeneratedToday++;
    console.log("‚úÖ Nouvelle recette fran√ßaise sauvegard√©e :", newRecipe.title);
  } catch (error) {
    console.error("‚ùå Erreur lors de la g√©n√©ration de recette :", error);
  }
});
